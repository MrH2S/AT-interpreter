/*! \brief  implement a FSM to parse standard at command record
 *  \author Shylock Hg
 *  \date 2018-06-20
 *  \email tcath2s@gmail.com
 * */

#ifndef _AT_FSM_H_
#define _AT_FSM_H_

#ifdef __cplusplus
	extern "C" {
#endif

#include "at_command.h"
#include "queue.h"

/*! \brief record structure of standard at command record
 *  \note this should be used as list node and generated by FSM
 * */
typedef struct at_cmd_record {
	char  name[AT_CMD_MAX_NAME_LEN];  //!< at command name "+NAME"
	char  param[AT_CMD_MAX_PARAM_LEN];  //!< at command parameter only for `exec with parameter`
	enum AT_CMD_INDEX type;  //!< at command type `query` , `exec without parameter` ...
} at_cmd_record_t;

/*! \brief at command FSM state
 * */
typedef enum at_cmd_FSM_state {
	AT_CMD_FSM_STATE_START,        //!< start state
	AT_CMD_FSM_STATE_A,            //!< 'A'
	AT_CMD_FSM_STATE_T,            //!< 'T'
	AT_CMD_FSM_STATE_PLUS,         //!< '+'
	AT_CMD_FSM_STATE_QUERY,        //!< '?' after command
	AT_CMD_FSM_STATE_TEST_OR_SET,  //!< '=' after command
	AT_CMD_FSM_STATE_TEST,         //!< '?' after '='
	AT_CMD_FSM_STATE_SET,          //!< [^?] after '='
	AT_CMD_FSM_STATE_PARAM         //!< between '"' and '"'
} at_cmd_FSM_state_t;

#define AT_CMD_FSM_STATE_COUNT 9

/*! \brief typedef the list to at command record list 
 *
 * */
typedef queue_class_t at_cmd_record_queue_t;  //!< value memeber point to at_cmd_record_t node

/*! \brief parse input record string to queue of record structure
 *  \param queue_record the queue of at command record
 *  \param record the standard record string
 *  \retval error retval
 * */
int at_cmd_FSM_parse_record(at_cmd_record_queue_t * queue_record, const char * record);

#ifdef __cplusplus
	}
#endif

#endif  //!< _AT_FSM_H_

